openapi: 3.0.0
info:
  title: Home Library Service
  description: Home music library service
  version: 1.0.0

servers:
  - url: /api

components:
  schemas:openapi: 3.0.0
paths:
  /:
    get:
      operationId: AppController_getHello
      parameters: []
      responses:
        '200':
          description: ''
  /user:
    get:
      operationId: UsersController_getAllUsers
      parameters: []
      responses:
        '200':
          description: ''
    post:
      operationId: UsersController_addUser
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddUserDto'
      responses:
        '201':
          description: ''
  /user/{id}:
    get:
      operationId: UsersController_getOneUser
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
    delete:
      operationId: UsersController_deleteUser
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: ''
    put:
      operationId: UsersController_updateUser
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserDto'
      responses:
        '200':
          description: ''
  /album:
    get:
      operationId: AlbumsController_getAllTracks
      parameters: []
      responses:
        '200':
          description: ''
    post:
      operationId: AlbumsController_addAlbum
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddAlbumDto'
      responses:
        '201':
          description: ''
  /album/{id}:
    get:
      operationId: AlbumsController_getOneAlbum
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
    put:
      operationId: AlbumsController_updateAlbum
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAlbumDto'
      responses:
        '200':
          description: ''
    delete:
      operationId: AlbumsController_deleteAlbum
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: ''
  /track:
    get:
      operationId: TracksController_getAllTracks
      parameters: []
      responses:
        '200':
          description: ''
    post:
      operationId: TracksController_addTrack
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddTrackDto'
      responses:
        '201':
          description: ''
  /track/{id}:
    get:
      operationId: TracksController_getOneUser
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
    delete:
      operationId: TracksController_deleteTrack
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: ''
    put:
      operationId: TracksController_updateTrack
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTrackDto'
      responses:
        '200':
          description: ''
  /artist:
    get:
      operationId: ArtistsController_getAllTracks
      parameters: []
      responses:
        '200':
          description: ''
    post:
      operationId: ArtistsController_addArtist
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddArtistDto'
      responses:
        '201':
          description: ''
  /artist/{id}:
    get:
      operationId: ArtistsController_getOneArtist
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
    put:
      operationId: ArtistsController_updateTrack
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateArtistDto'
      responses:
        '200':
          description: ''
    delete:
      operationId: ArtistsController_deleteArtist
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: ''
  /favs:
    get:
      operationId: FavoritesController_getAllFavorites
      parameters: []
      responses:
        '200':
          description: ''
  /favs/track/{id}:
    post:
      operationId: FavoritesController_addTrackById
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '201':
          description: ''
    delete:
      operationId: FavoritesController_deleteTrackById
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: ''
  /favs/album/{id}:
    post:
      operationId: FavoritesController_addAlbumById
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '201':
          description: ''
    delete:
      operationId: FavoritesController_deleteAlbumById
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: ''
  /favs/artist/{id}:
    post:
      operationId: FavoritesController_addArtistById
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '201':
          description: ''
    delete:
      operationId: FavoritesController_deleteArtistById
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: ''
info:
  title: REST Service
  description: >-
    Let's try to create a Home Library Service! Users can create, read, update,
    delete data about Artists, Tracks and Albums, add them to Favorites in their
    own Home Library!
  version: '1.0'
  contact: {}
tags:
  - name: api
    description: ''
servers: []
components:
  schemas:
    AddUserDto:
      type: object
      properties:
        login:
          type: string
          default: Jimmy Roquai
        password:
          type: string
          default: '12345678'
      required:
        - login
        - password
    UpdateUserDto:
      type: object
      properties:
        oldPassword:
          type: string
          default: '12345678'
        newPassword:
          type: string
          default: '87654321'
      required:
        - oldPassword
        - newPassword
    AddAlbumDto:
      type: object
      properties:
        name:
          type: string
          default: Dynamite
        year:
          type: number
          default: 2005
        artistId:
          type: string
          default: null
      required:
        - name
        - year
    UpdateAlbumDto:
      type: object
      properties:
        name:
          type: string
        year:
          type: number
        artistId:
          type: string
          default: null
      required:
        - name
        - year
    AddTrackDto:
      type: object
      properties:
        name:
          type: string
          default: Cosmic Girl
        duration:
          type: number
          default: 241
        artistId:
          default: null
          allOf:
            - $ref: '#/components/schemas/AddTrackDto'
        albumId:
          default: null
          allOf:
            - $ref: '#/components/schemas/AddTrackDto'
      required:
        - name
        - duration
    UpdateTrackDto:
      type: object
      properties:
        name:
          type: string
          default: Cosmic Girl radio edit
        artistId:
          type: string
          default: null
        albumId:
          type: string
          default: null
        duration:
          type: number
          default: 207
      required:
        - name
        - artistId
        - duration
    AddArtistDto:
      type: object
      properties:
        name:
          type: string
          default: Jamiroquai
        grammy:
          type: boolean
          default: true
      required:
        - name
        - grammy
    UpdateArtistDto:
      type: object
      properties:
        name:
          type: string
        grammy:
          type: boolean
      required:
        - name
        - grammy
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        login:
          type: string
          example: 'TestUser'
        version:
          type: number
          example: 1
        createAt:
          type: number
          example: 1655000000
        updateAt:
          type: number
          example: 1655000000
      required:
        - id
        - login
    Artist:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: 'Freddie Mercury'
        grammy:
          type: boolean
          example: false
      required:
        - id
        - name
    Album:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: 'Innuendo'
        year:
          type: integer
          example: 1991
        artistId:
          type: string
          format: uuid
          nullable: true
      required:
        - id
        - name
    Track:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: The Show Must Go On
        artistId:
          type: string
          format: uuid
          nullable: true
        albumId:
          type: string
          format: uuid
          nullable: true
        duration:
          type: integer
          description: In seconds
          example: 262
      required:
        - id
        - name
        - duration
    Favorites:
      type: object
      properties:
        artists:
          type: array
          items:
            $ref: '#/components/schemas/Artist'
        albums:
          type: array
          items:
            $ref: '#/components/schemas/Album'
        tracks:
          type: array
          items:
            $ref: '#/components/schemas/Track'
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: []

paths:
  /login:
    post:
      tags:
        - Login
      security: []
      summary: Login
      description: Logins a user and returns a JWT-token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                login:
                  type: string
                  description: Username
                password:
                  type: string
                  description: Password
              required:
                - user
                - login
      responses:
        200:
          description: Successful login.
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                description: JWT Token
        403:
          description: Incorrect login or password
  /signup:
    post:
      tags:
        - Signup
      security: [ ]
      summary: Signup
      description: Signup a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                login:
                  type: string
                  minLength: 3
                  maxLength: 255
                  description: Username
                password:
                  type: string
                  format: password
                  pattern: ^[a-zA-Z0-9]{3,30}
                  description: Password
              required:
                - login
                - password
      responses:
        204:
          description: Successful signup
        400:
          description: Bad request
        409:
          description: Conflict. Login already exists
  /users:
    get:
      tags:
        - Users
      summary: Get all users
      description: Gets all users
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        401:
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
        - Users
      summary: Create user
      description: Creates a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                login:
                  type: string
                  description: The user's login
                password:
                  type: string
                  description: The user's password
              required:
                - login
                - password
      responses:
        201:
          description: The user has been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Bad request. body does not contain required fields
        401:
          $ref: '#/components/responses/UnauthorizedError'
  /users/{userId}:
    parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Users
      summary: Get single user by id
      description: Get single user by id
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Bad request. userId is invalid (not uuid)
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: User not found

    put:
      tags:
        - Users
      summary: Update a user's password
      description: Updates a user's password by ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                oldPassword:
                  type: string
                  description: The user's old password
                newPassword:
                  type: string
                  description: The user's new password
              required:
                - oldPassword
                - newPassword
      responses:
        200:
          description: The user has been updated.
          content:
            application/json:
              schema:
                type: object
                title: example
                properties:
                  id:
                    type: string
                    format: uuid
                  login:
                    type: string
                    example: TestUser
                  version:
                    type: integer
                    example: 2
                  createAt:
                    type: integer
                    example: 1655000000
                  updateAt:
                    type: integer
                    example: 1655999999
        400:
          description: Bad request. userId is invalid (not uuid)
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          description: oldPassowrd is wrong
        404:
          description: User not found

    delete:
      tags:
        - Users
      summary: Delete user
      description: Deletes user by ID.
      responses:
        204:
          description: The user has been deleted
        400:
          description: Bad request. userId is invalid (not uuid)
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: User not found
  /tracks:
    get:
      tags:
        - Track
      summary: Get tracks list
      description: Gets all library tracks list
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Track'
        401:
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
        - Track
      summary: Add new track
      description: Add new track information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                artistId:
                  type: string
                  format: uuid
                albumId:
                  type: string
                  format: uuid
                duration:
                  type: integer
                  description: In seconds
              required:
                - name
                - duration
      responses:
        201:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        400:
          description: Bad request. body does not contain required fields
        401:
          $ref: '#/components/responses/UnauthorizedError'
  /tracks/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - Track
      summary: Get single track by id
      description: Gets single track by id
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        400:
          description: Bad request. trackId is invalid (not uuid)
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Track was not found.
    put:
      tags:
        - Track
      summary: Update track information
      description: Update library track information by UUID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                name:
                  type: string
                  example: Bohemian Rhapsody
                artistId:
                  type: string
                  format: uuid
                  nullable: true
                duration:
                  type: integer
                  description: In seconds
                  example: 355
                albumId:
                  type: string
                  format: uuid
                  nullable: true
              required:
                - name
                - duration
      responses:
        200:
          description: The track has been updated.
          content:
            application/json:
              schema:
                type: object
                title: example
                properties:
                  id:
                    type: string
                    format: uuid
                  name:
                    type: string
                    example: Bohemian Rhapsody
                  artistId:
                    type: string
                    format: uuid
                    nullable: true
                  duration:
                    type: integer
                    description: In seconds
                    example: 355
                  albumId:
                    type: string
                    format: uuid
                    nullable: true
        400:
          description: Bad request. trackId is invalid (not uuid)
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Track was not found.
    delete:
      tags:
        - Track
      summary: Delete track
      description: Delete track from library
      responses:
        204:
          description: Delelted succesfully
        400:
          description: Bad request. trackId is invalid (not uuid)
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Track was not found.
  /albums:
    get:
      tags:
        - Album
      summary: Get albums list
      description: Gets all library alibums list
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Album'
        401:
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
        - Album
      summary: Add new album
      description: Add new album information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                name:
                  type: string
                year:
                  type: integer
                artistId:
                  type: string
                  format: uuid
                  nullable: true
              required:
                - name
                - year
      responses:
        201:
          description: Almub is created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        400:
          description: Bad request. body does not contain required fields
        401:
          $ref: '#/components/responses/UnauthorizedError'
  /albums/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - Album
      summary: Get single album by id
      description: Gets single album by id
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        400:
          description: Bad request. albumId is invalid (not uuid)
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Album was not found.
    put:
      tags:
        - Album
      summary: Update album information
      description: Update library album information by UUID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                name:
                  type: string
                year:
                  type: integer
                artistId:
                  type: string
                  format: uuid
                  nullable: true
              required:
                - name
                - year
      responses:
        200:
          description: The album has been updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        400:
          description: Bad request. albumId is invalid (not uuid)
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Album was not found.
    delete:
      tags:
        - Album
      summary: Delete album
      description: Delete album from library
      responses:
        204:
          description: Deleted succesfully
        400:
          description: Bad request. albumId is invalid (not uuid)
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Album was not found.
  /artists:
    get:
      tags:
        - Artist
      summary: Get all artists
      description: Gets all artists
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Artist'
        401:
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
        - Artist
      summary: Add new artist
      description: Add new artist
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                grammy:
                  type: boolean
              required:
                - name
                - grammy
      responses:
        201:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        400:
          description: Bad request. body does not contain required fields
        401:
          $ref: '#/components/responses/UnauthorizedError'
  /artists/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - Artist
      summary: Get single artist by id
      description: Get single artist by id
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        400:
          description: Bad request. artistId is invalid (not uuid)
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Artist was not found.
    put:
      tags:
        - Artist
      summary: Update artist information
      description: Update artist information by UUID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                grammy:
                  type: boolean
              required:
                - name
                - grammy
      responses:
        200:
          description: The artist has been updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        400:
          description: Bad request. artistId is invalid (not uuid)
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Artist was not found.
    delete:
      tags:
        - Artist
      summary: Delete artist
      description: Delete artist from library
      responses:
        204:
          description: Delelted succesfully
        400:
          description: Bad request. artistId is invalid (not uuid)
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Artist was not found.
  /favs:
    get:
      tags:
        - Favorites
      summary: Get all favorites
      description: Gets all favorites movies, tracks and books
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Favorites'
        401:
          $ref: '#/components/responses/UnauthorizedError'
  /favs/track/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    post:
      tags:
        - Favorites
      summary: Add track to the favorites
      description: Add track to the favorites
      responses:
        201:
          description: Added succesfully
        400:
          description: Bad. trackId is invalid (not uuid)
        401:
          $ref: '#/components/responses/UnauthorizedError'
        422:
          description: Track with id doesn't exist.
    delete:
      tags:
        - Favorites
      summary: Delete track from favorites
      description: Delete track from favorites
      responses:
        204:
          description: Deleted succesfully
        400:
          description: Bad. trackId is invalid (not uuid)
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Track was not found.
  /favs/album/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    post:
      tags:
        - Favorites
      summary: Add album to the favorites
      description: Add album to the favorites
      responses:
        201:
          description: Added succesfully
        400:
          description: Bad. albumId is invalid (not uuid)
        401:
          $ref: '#/components/responses/UnauthorizedError'
        422:
          description: Album with id doesn't exist.
    delete:
      tags:
        - Favorites
      summary: Delete album from favorites
      description: Delete album from favorites
      responses:
        204:
          description: Deleted succesfully
        400:
          description: Bad. albumId is invalid (not uuid)
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Album was not found.
  /favs/artist/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    post:
      tags:
        - Favorites
      summary: Add artist to the favorites
      description: Add artist to the favorites
      responses:
        201:
          description: Added succesfully
        400:
          description: Bad request. artistId is invalid (not uuid)
        401:
          $ref: '#/components/responses/UnauthorizedError'
        422:
          description: Artist with id doesn't exist.
    delete:
      tags:
        - Favorites
      summary: Delete artist from favorites
      description: Delete artist from favorites
      responses:
        204:
          description: Deleted succesfully
        400:
          description: Bad request. artistId is invalid (not uuid)
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Artist was not found.